/*
 * Copyright 2022 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.transitmovementsvalidator.services

import akka.stream.Materializer
import akka.stream.scaladsl.FileIO
import akka.util.Timeout
import org.scalatest.concurrent.ScalaFutures
import org.scalatest.freespec.AnyFreeSpec
import org.scalatest.matchers.must.Matchers
import org.scalatestplus.mockito.MockitoSugar
import uk.gov.hmrc.transitmovementsvalidator.base.TestActorSystem
import uk.gov.hmrc.transitmovementsvalidator.models.errors.JsonSchemaValidationError
import uk.gov.hmrc.transitmovementsvalidator.models.errors.ValidationError

import java.nio.file.Paths
import scala.concurrent.duration.DurationInt
import scala.xml.NodeSeq
import scala.concurrent.ExecutionContext.Implicits.global

class JsonValidationServiceSpec extends AnyFreeSpec with Matchers with MockitoSugar with TestActorSystem with ScalaFutures {

  implicit val timeout: Timeout           = Timeout(5.seconds)
  implicit val materializer: Materializer = Materializer(TestActorSystem.system)

  lazy val validXml: NodeSeq = <test></test>
  lazy val validCode: String = "IE015"

  lazy val testDataPath = "./test/uk/gov/hmrc/transitmovementsvalidator/data"

  implicit override val patienceConfig: PatienceConfig = PatienceConfig(15.seconds, 15.millis)

  "On Validate" - {
    "when valid JSON is provided for the given message type, return a Right" in {
      val source = FileIO.fromPath(Paths.get(s"$testDataPath/cc015c-generated-from-json-schema.json"))
      val sut    = new JsonValidationServiceImpl
      val result = sut.validate(validCode, source)

      whenReady(result) {
        r =>
          r.isRight mustBe true
      }
    }

    "when no valid message type is provided, return UnknownMessageTypeValidationError" in {
      val source      = FileIO.fromPath(Paths.get(s"$testDataPath/cc015c-generated-from-json-schema.json"))
      val invalidCode = "dummy"
      val sut         = new JsonValidationServiceImpl
      val result      = sut.validate(invalidCode, source)

      whenReady(result) {
        r =>
          r.isLeft mustBe true
          r.left.get.head mustBe ValidationError.fromUnrecognisedMessageType(invalidCode)
      }
    }

    "when valid message type provided but with unexpected json, return errors" in {
      val source = FileIO.fromPath(Paths.get(s"$testDataPath/cc015c-invalid-data.json"))
      val sut    = new JsonValidationServiceImpl
      val result = sut.validate(validCode, source)

      whenReady(result) {
        r =>
          r.isLeft mustBe true
          r.left.get.head.isInstanceOf[JsonSchemaValidationError]
      }
    }

    "when schema valid JSON generated by transit-movements-converter is provided, return a Right" in {
      val source = FileIO.fromPath(Paths.get(s"$testDataPath/cc015c-generated-by-converter.json"))
      val sut    = new JsonValidationServiceImpl
      val result = sut.validate(validCode, source)

      whenReady(result) {
        r =>
          r.isRight mustBe true
      }
    }
  }
}
